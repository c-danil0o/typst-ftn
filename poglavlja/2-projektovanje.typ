= Спецификација и пројектовање техничког решења
<specifikacija>

Развој сложеног софтверског решења, као што је систем за управљање фитнес центром, захтева да се јасно дефинишу сви захтеви, ограничења и архитектонски принципи пре него што се ступи у фазу имплементације.
Потребно је извршити детаљну анализу потреба корисника и идентификовати пословне процесе које треба обухватити системом. Тиме се дефинишу основне функционалности које систем мора да пружи.
Циљ је да се прикаже на који начин су дефинисани процеси управљања члановима, чланаринама и контролом приступа, као и како су ови процеси интегрисани у јединствену платформу која подржава локални рад и рад у облаку.
С обзиром на то да GymMan (назив имплементираног решења) систем треба да обезбеди поуздано и једноставно управљање пословањем теретане, његова архитектура мора бити осмишљена тако да подржи следеће принципе:
- Интуитивно корисничко искуство за запослене и чланове
- Флексибилност у конфигурацији и прилагођавању различитим врстама теретана
- Јасна раздвојеност компоненти за лакше одржавање и надоградњу
- Могућност проширења система новим функционалностима
- _Offline first_ приступ за рад без интернет конекције
- Сигурна и контролисана синхронизација података са облаком
Да би се ови циљеви постигли, у наставку су најпре дефинисани функционални и нефункционални захтеви, након чега следи приказ предложене архитектуре.
Архитекура система је описана одговарајућим UML дијаграмима који визуелно представљају структуру и токове података у систему.

== Функционални захтеви
Функционални захтеви дефинишу конкретно понашање система, односно функционалности које треба да буду омогућене крајњим корисницима.
Систем GymMan треба да подржи све процесе неопходне за ефикасно управљање теретаном.
Захтеви су груписани по главним модулима система.

- *Управљање члановима*
  - Регистрација нових чланова са свим потребним подацима (име, презиме, контакт информације, датум рођења и јединствени идентификатор - број картице)
  - Ажурирање података постојећих чланова од стране запослених
  - Преглед листе чланова са могућношћу претраге
  - Брисање чланова из система
  - Позив за креирање налога за мобилну апликацију путем е-поште
  - Захтев за ресетовање лозинке за мобилну апликацију путем е-поште

- *Управљање чланаринама*
  - Дефинисање различитих типова чланарина на основу трајања, броја посета, цене и ограничења приступа
  - Додела чланарина члановима - члан може имати једну активну и више предстојећих чланарина
  - Праћење статуса чланарине и ажурирање права приступа на основу тог статуса
  - Обнављање чланарине након истека
  - Евиденција историје чланарина и плаћања за сваког члана

- *Контрола приступа*
  - Скенер чланске картице при уласку у теретану и идентификација члана
  - Верификација статуса чланарине у реалном времену
  - Омогућавање или одбијање приступа на основу валидности чланарине
  - Ажурирање броја преосталих улазака након сваког уласка
  - Евиденција сваког приступа са временском ознаком и идентификатором члана
  - Подршка за пробне и дневне тренинге уз евиденцију уласка

- *Аналитика и извештаји*
  - Преглед статистике посета уз истицање трендова
  - Приказ броја активних чланова кроз време
  - Приказ прихода од различитих типова чланарина и њихова дистрибуција
  - Приступ историјским подацима евиденције улазака и њихово филтрирање

- *Прављење резервних копија и синхронизација*
  - Локално чување података на уређају за рад у офлајн (енгл. _offline_) режиму и брз приступ
  - Ручно или периодично аутоматско прављење резервних копија података и слање на облак
  - Враћање података из резервних копија на истом или новом уређају уз потпуни интегритет података
  - Аутоматска синхронизација података у реалном времену између локалне базе и удаљене базе за мобилну апликацију, намењене само за читање података (енгл. _read-only_)

- *Кориснички налози и аутентификација*
  - Креирање налога за запослене са различитим улогама
  - Креирање налога за чланове теретане за приступ мобилној апликацији
  - Сервис за аутентификацију чланова при приступу мобилној апликацији

== Нефункционални захтеви

Нефункционални захтеви дефинишу квалитативне особине система и одређују начин на који он треба да функционише, без директног утицаја на конкретну функционалност.

- *Перформансе*
  - Систем мора обезбедити брз одзив при свакој операцији
  - Сихронизација података са облаком не сме утицати на перформансе локалног рада
  - Процес резервне копије мора бити извршен у позадини без утицаја на рад корисника
  - Систем мора бити оптимизован за рад на уређајима са ограниченим ресурсима

- *Безбедност*
  - Све лозинке морају бити сигурно похрањене и хеширане
  - Комуникација између система и облака мора бити шифрована коришћењем TLS (енгл. Transport Layer Security) протокола
  - Свака грешка у аутентификацији мора бити евидентирана
  - Приступ осетљивим подацима мора бити ограничен на овлашћене кориснике

- *Доступност, конзистентност и интегритет података*
  - Систем мора бити доступан и у случају привремене нестанка интернет конекције
  - Локални подаци морају бити конзистентни и интегритет података мора бити очуван током свих операција
  - У случају кашњења у синхронизацији са мобилном апликацијом због прекида интернет конекције локални рад треба да остане конзистентан

- *Корисничко искуство*
  - Кориснички интерфејс мора бити интуитиван и једноставан

- *Преносивост и независност од платформе*
  - Систем мора бити преносив и радити на различитим оперативним системима (Windows, macOS, Linux)
  - Локална база података мора бити независна од специфичне платформе
  - Систем мора бити лако преносив на нови уређај уз минималне напоре
  - Мобилна апликација мора да ради на најпопуларнијим мобилним платформама (iOS и Android)

- *Одрживост и проширивост*
  - Архитектура система мора бити модуларна како би се омогућило лако одржавање и надоградња
  - Систем мора бити дизајниран тако да се нове функционалности могу лако додати у будућности

- *Локализација*
  - Систем мора подржавати више језика и омогућити лако прилагођавање корисничког интерфејса

== Архитектура система

#figure([#box(width: auto, image("../slike/arhitektura-sistema.png"));],
    caption: [
      Архитектура система.
    ]
  )<fig:arhitektura>

Архитектура система GymMan је осмишљена као хибридно решење које комбинује локалну апликацију са _cloud_ инфраструктуром.
На слици @fig:arhitektura приказана је основна архитектура система која се састоји из следећих компоненти:
- *Desktop апликација* - представља централни део система, инсталира се на рачунар унутар теретане и користи за управљање свим пословним процесима у теретани. Изграђена је на основу клијент-сервер архитектуре унутар једног пакета. Ова компонента је одговорна за управљање локалном базом података,
  обраду пословне логике, аутентификацију запослених, креирање резеврних копија, синхронизацију са облаком и комуникацију са скенером чланских картица. Уз то, она пружа интуитиван кориснички интерфејс за запослене и администраторе.
- *Cloud инфраструктура* - састоји се из два дела: сервиси за складиштење и добављање резервних копија и база података која представља поједностављену _read-only_ реплику локалне базе.
  Ова компонента омогућава чување резервних копија на сигурном месту ван теретане и пружа приступ подацима који су неопходни за коришћење мобилне апликације.
- *Мобилна апликација* - намењена је члановима теретане и омогућава им приступ информацијама о статусу чланарине и може да се користи уместо физичке чланске картице јер приказује бар-код за скенирање при уласку у теретану. Апликација комуницира са _cloud_ базом података како би добила најновије информације.
- *Mail сервис* - користи се за слање е-порука члановима теретане, као што су позиви за креирање налога мобилне апликације и захтеви за ресетовање лозинке. Овај сервис такође комуницира сервисима за аутентификацију у _cloud_ инфраструктури.
- *Веб апликација за креирање налога* - намењена је за креирање налога за мобилну апликацију. Корисници приступају овој апликацији путем сигурног линка из е-поруке. Веб апликација комуницира са сервисом за аутентификацију у _cloud_ инфраструктури како би креирала налоге и омогућила приступ мобилној апликацији.
Комуникација између свих компоненти је шифрована коришћењем TLS протокола како би се обезбедила безбедност података током преноса.

Избор архитектуре заснован је на потреби да се обезбеди комбинација локалне поузданости и _cloud_ интеграције.
Традиционална _web-only_ решења често зависе од стабилне интернет конекције, што може бити проблематично у реалним условима рада теретана.
GymMan пружа пуну функционалност чак и у одсуству мреже (енгл. _offline-first_), уз каснију синхронизацију података са _cloud_-ом.
Овакав приступ омогућава најбољи баланс између аутономије, безбедности и једноставности коришћења и инсталације.

=== Дијаграм класа

На слици @fig:diagram-klasa приказан је UML дијаграм класа који представља структуру система GymMan. Систем није имплементиран коришћењем објектно оријентисаног програмског језика,
али прилагођени дијаграм класа ипак може пружити јасан преглед главних ентитета у систему и њихових међусобних односа.


#figure([#box(width: auto, image("../slike/class.png"));],
    caption: [
      Дијаграм класа система.
    ]
  )<fig:diagram-klasa>

Овај дијаграм приказује следеће главне класе:
- *Member* - представља члана теретане са својим основним подацима као што су име, презиме, контакт информације и јединствени број чланске картице. Ова класа садржи поље _auth_id_ које представља везу са налогом у моблиној апликацији.
- *Membership* - представља чланарину која је додељена члану. Један члан може да буде власник више чланарина, од којих само једна може да буде тренутно активна. Садржи информације о типу чланарине, датуму почетка и истека, датуму куповине, броју преосталих улазака и статусу чланарине.
- *MembershipType* - дефинише различите типове чланарина које теретана нуди. Садржи информације као што су назив типа, трајање, цена, број улазака и ограничења приступа. Поље _is_active_ указује да ли је тип чланарине тренутно доступан за продају (временски ограничене промотивне понуде).
  Једна чланарина може бити повезана са једним типом чланарине.
- *EntryLog* - евидентира сваки улазак члана у теретану. Садржи временску ознаку уласка, идентификатор и број картице члана који је приступио објекту. Не постоји ограничење на број уноса за једног члана.
  Такође садржи информације о статусу уласка и покрива све случајеве (валидна чланарина, пробни тренинг, истекла чланарина, прекорачен број улазака, итд.). У пољу _notes_ чувају се детаљи одбијања уласка.
- *User* - представља запосленог у теретани који користи десктоп апликацију. Садржи основне податке као што су корисничко име, хеширана лозинка и улога (администратор или запослени). Омогућава аутентификацију и контролу приступа унутар апликације.
- *CronCheck* - садржи информације о периодичним проверама. Те провере су везане за резервне копије и за аутоматско дневно ажурирање статуса чланарина на основу датума почетка или истека.
  Ова класа чува информације о последњем извршавању провере и успешности последње операције.
- *PendingChange* - представља промене које су направљене у систему, али још увек нису синхронизоване са _cloud_ сервисом.
  Ова класа омогућава праћење промена које треба послати на облак када је интернет конекција доступна. Садржи информације о типу промене, самој промени, повезаном ентитету и временској ознаци када је промена направљена.

Осим наведених класа, дијаграм приказује и везе између њих као и додатне енумерације које дефинишу могуће вредности за поља као што су статус чланарине, статус уласка и улога корисника.

=== Дијаграми активности

Да би се боље разумели пословни процеси у систему, на сликама @fig:diagram-aktivnosti-registracija, @fig:diagram-aktivnosti-ulazak и @fig:diagram-aktivnosti-sinhronizacija приказани су UML дијаграми активности за неке од кључних операција.

#figure([#box(width: auto, image("../slike/new_member.png"));],
    caption: [
      Дијаграм активности за регистрацију новог члана.
    ]
  )<fig:diagram-aktivnosti-registracija>

Слика @fig:diagram-aktivnosti-registracija приказује кораке укључене у процес регистрације новог члана теретане.
Процес почиње када запослени у апликацији изабере опцију за додавање новог члана. Затим се уносе и проверавају основни подаци члана. Радник користи бар-код скенер или ручно уноси број нове чланске картице.
Чланска картица се валидира да не припада ниједном постојећем члану, након чега се креира нови запис у локалној бази података. Систем нуди раднику опцију да креира чланарину за новог члана одмах након регистрације.
Ако се одабере ова опција, радник бира тип чланарине и уноси потребне детаље пре него што се чланарина додели члану.

#figure([#box(width: auto, image("../slike/scan_activity.png"));],
    caption: [
      Дијаграм активности за евиденцију уласка члана.
    ]
  )<fig:diagram-aktivnosti-ulazak>

Слика @fig:diagram-aktivnosti-ulazak приказује кораке укључене у процес евиденције уласка члана у теретану.
Процес почиње када члан скенира своју чланску картицу на улазу. Систем чита број картице и тражи одговарајући запис у локалној бази података.
Ако члан постоји, систем проверава статус његове чланарине. У зависности од статуса, систем одлучује да ли ће дозволити или одбити приступ.
У случају валидне чланарине, приступ је дозвољен, број преосталих улазака се ажурира, и евидентира се улазак са временском ознаком.
Ако је чланарина истекла или нема довољно улазака, приступ се одбија и евидентира се неуспешан покушај уласка са одговарајућим разлогом.

#figure([#box(width: auto, image("../slike/sync_activity.png"));],
    caption: [
      Дијаграм активности за синхронизацију података са облаком.
    ]
  )<fig:diagram-aktivnosti-sinhronizacija>

Слика @fig:diagram-aktivnosti-sinhronizacija приказује поједностављене кораке укључене у процес синхронизације података између локалне базе и _cloud_ сервиса.
Процес синхронизације може бити инициран ручно од стране запосленог или аутоматски у позадини. Аутоматско иницирање дешава се у случају неке битне промене над подацима која захтева тренутну синхронизацију и периодично у подешеном интервалу.
Синхронизација почиње проверавањем доступности интернет конекције. Ако је конекција доступна, систем почиње са слањем локалних промена које још нису синхронизоване.
За сваку промену, систем покушава да је пошаље на _cloud_ сервис и чека потврду о успешном пријему. У случају грешке, бележи се неуспешна синхронизација и наставља се са следећом променом.
Неуспешне промене остају у локалној листи за касније покушаје слања. Синхронизација се врши само у једном смеру - са локалне базе на _cloud_ сервис, јер мобилна апликација користи поједностављену _read-only_ верзију података.
